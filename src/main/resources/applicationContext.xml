<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/cache
		http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- Spring 的 IoC 容器会接管目标包下所有被组件注解标识的类 -->
	<context:component-scan base-package="com.zheling">
		<!-- 由于 Controller 最终要被 Spring MVC 管理，所以为了避免 bean 的重复注册，这里规定 Spring 交出对 Controller 的控制权 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 自动为所有被 @AspectJ 标识的类创建 Cglib 代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 启用事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 引入外部资源文件，用以获取数据库连接配置 -->
	<context:property-placeholder location="classpath:org.properties" />

	<!-- 配置 Druid 连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 获取连接时最大的等待时间，单位毫秒 -->
		<property name="maxWait" value="60000" />
		<!-- 多久检测一次需要关闭的空闲连接，单位毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 连接在池中最短的生存时间，单位毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 检测连接是否有效 -->
		<property name="validationQuery" value="select 1 from dual" />
		<!-- 申请连接时检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，则执行 validationQuery -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行 validationQuery，开启会降低性能 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行 validationQuery，开启会降低性能 -->
		<property name="testOnReturn" value="false" />
		<!-- 开启监控统计 -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 将 SqlSessionFactory 交由 Spring 的 IoC 容器管理 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatisConfig.xml" />
		<property name="mapperLocations" value="classpath:com/zheling/**/*Mapper.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置目标包路径 -->
		<property name="basePackage" value="com.zheling" />
		<!-- 扫描目标包下的所有接口，并把其中所有被 @Repository 标识的接口注册为 MapperFactoryBean -->
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>

	<!-- 启用缓存注解 -->
	<cache:annotation-driven />

	<!-- 配置缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
					<property name="name" value="default" />
				</bean>
			</set>
		</property>
	</bean>

</beans>